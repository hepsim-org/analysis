//
// File generated by rootcint at Mon Mar  6 17:23:31 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME srcdICParticle_dict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "CParticle_dict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void CParticle_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_CParticle(void *p = 0);
   static void *newArray_CParticle(Long_t size, void *p);
   static void delete_CParticle(void *p);
   static void deleteArray_CParticle(void *p);
   static void destruct_CParticle(void *p);
   static void streamer_CParticle(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::CParticle*)
   {
      ::CParticle *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::CParticle >(0);
      static ::ROOT::TGenericClassInfo 
         instance("CParticle", ::CParticle::Class_Version(), "./inc/CParticle.h", 17,
                  typeid(::CParticle), ::ROOT::DefineBehavior(ptr, ptr),
                  &::CParticle::Dictionary, isa_proxy, 0,
                  sizeof(::CParticle) );
      instance.SetNew(&new_CParticle);
      instance.SetNewArray(&newArray_CParticle);
      instance.SetDelete(&delete_CParticle);
      instance.SetDeleteArray(&deleteArray_CParticle);
      instance.SetDestructor(&destruct_CParticle);
      instance.SetStreamerFunc(&streamer_CParticle);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::CParticle*)
   {
      return GenerateInitInstanceLocal((::CParticle*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CParticle*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr CParticle::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *CParticle::Class_Name()
{
   return "CParticle";
}

//______________________________________________________________________________
const char *CParticle::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::CParticle*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int CParticle::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::CParticle*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void CParticle::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::CParticle*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *CParticle::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::CParticle*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void CParticle::Streamer(TBuffer &R__b)
{
   // Stream an object of class CParticle.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> Px;
      R__b >> Py;
      R__b >> Pz;
      R__b >> E;
      R__b >> Mass;
      R__b >> Charge;
      R__b >> m_pid;
      R__b >> m_status;
      {
         vector<int> &R__stl =  parameters;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, CParticle::IsA());
   } else {
      R__c = R__b.WriteVersion(CParticle::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << Px;
      R__b << Py;
      R__b << Pz;
      R__b << E;
      R__b << Mass;
      R__b << Charge;
      R__b << m_pid;
      R__b << m_status;
      {
         vector<int> &R__stl =  parameters;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<int>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void CParticle::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class CParticle.
      TClass *R__cl = ::CParticle::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Px", &Px);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Py", &Py);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Pz", &Pz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "E", &E);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Mass", &Mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Charge", &Charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_pid", &m_pid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_status", &m_status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "parameters", (void*)&parameters);
      R__insp.InspectMember("vector<int>", (void*)&parameters, "parameters.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_CParticle(void *p) {
      return  p ? new(p) ::CParticle : new ::CParticle;
   }
   static void *newArray_CParticle(Long_t nElements, void *p) {
      return p ? new(p) ::CParticle[nElements] : new ::CParticle[nElements];
   }
   // Wrapper around operator delete
   static void delete_CParticle(void *p) {
      delete ((::CParticle*)p);
   }
   static void deleteArray_CParticle(void *p) {
      delete [] ((::CParticle*)p);
   }
   static void destruct_CParticle(void *p) {
      typedef ::CParticle current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_CParticle(TBuffer &buf, void *obj) {
      ((::CParticle*)obj)->::CParticle::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::CParticle

namespace ROOTDict {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "prec_stl/vector", 49,
                  typeid(vector<int>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<int>

/********************************************************
* src/CParticle_dict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableCParticle_dict();

extern "C" void G__set_cpp_environmentCParticle_dict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("inc/CParticle.h");
  G__cpp_reset_tagtableCParticle_dict();
}
#include <new>
extern "C" int G__cpp_dllrevCParticle_dict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* CParticle */
static int G__CParticle_dict_170_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CParticle[n];
     } else {
       p = new((void*) gvp) CParticle[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CParticle;
     } else {
       p = new((void*) gvp) CParticle;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CParticle_dictLN_CParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CParticle(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) CParticle(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CParticle_dictLN_CParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CParticle(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
   } else {
     p = new((void*) gvp) CParticle(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CParticle_dictLN_CParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CParticle(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
   } else {
     p = new((void*) gvp) CParticle(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CParticle_dictLN_CParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 6
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CParticle(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5]));
   } else {
     p = new((void*) gvp) CParticle(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CParticle_dictLN_CParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CParticle((CParticle*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) CParticle((CParticle*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CParticle_dictLN_CParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CParticle*) G__getstructoffset())->setParameter((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int>* pobj;
         vector<int> xobj = ((CParticle*) G__getstructoffset())->getParameters();
         pobj = new vector<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((CParticle*) G__getstructoffset())->px());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((CParticle*) G__getstructoffset())->py());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((CParticle*) G__getstructoffset())->pz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((CParticle*) G__getstructoffset())->e());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((CParticle*) G__getstructoffset())->id());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CParticle*) G__getstructoffset())->getPxPyPz(*(int*) G__Intref(&libp->para[0]), *(int*) G__Intref(&libp->para[1])
, *(int*) G__Intref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((CParticle*) G__getstructoffset())->mass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((CParticle*) G__getstructoffset())->charge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((CParticle*) G__getstructoffset())->status());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CParticle*) G__getstructoffset())->setID((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CParticle*) G__getstructoffset())->setCharge((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CParticle*) G__getstructoffset())->setStatus((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CParticle*) G__getstructoffset())->setMass((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CParticle*) G__getstructoffset())->setE((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((CParticle*) G__getstructoffset())->invMassE());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((CParticle*) G__getstructoffset())->invMassM());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((CParticle*) G__getstructoffset())->calcPt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((CParticle*) G__getstructoffset())->calcPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((CParticle*) G__getstructoffset())->calcPhiWrap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((CParticle*) G__getstructoffset())->calcPhiWrapGrad());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((CParticle*) G__getstructoffset())->calcP());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((CParticle*) G__getstructoffset())->calcE());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((CParticle*) G__getstructoffset())->calcEta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         CParticle* pobj;
         CParticle xobj = ((CParticle*) G__getstructoffset())->copy();
         pobj = new CParticle(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         CParticle* pobj;
         CParticle xobj = ((CParticle*) G__getstructoffset())->operator+(*((CParticle*) G__int(libp->para[0])));
         pobj = new CParticle(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CParticle*) G__getstructoffset())->operator<(*(CParticle*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CParticle*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((CParticle*) G__getstructoffset())->toString();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) CParticle::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) CParticle::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) CParticle::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      CParticle::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CParticle*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) CParticle::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) CParticle::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) CParticle::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CParticle_dict_170_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) CParticle::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__CParticle_dict_170_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   CParticle* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new CParticle(*(CParticle*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CParticle_dictLN_CParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CParticle G__TCParticle;
static int G__CParticle_dict_170_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CParticle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CParticle*) (soff+(sizeof(CParticle)*i)))->~G__TCParticle();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CParticle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CParticle*) (soff))->~G__TCParticle();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__CParticle_dict_170_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CParticle* dest = (CParticle*) G__getstructoffset();
   *dest = *(CParticle*) libp->para[0].ref;
   const CParticle& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* CParticle */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncCParticle_dict {
 public:
  G__Sizep2memfuncCParticle_dict(): p(&G__Sizep2memfuncCParticle_dict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncCParticle_dict::*p)();
};

size_t G__get_sizep2memfuncCParticle_dict()
{
  G__Sizep2memfuncCParticle_dict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceCParticle_dict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CParticle_dictLN_CParticle))) {
     CParticle *G__Lderived;
     G__Lderived=(CParticle*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CParticle_dictLN_CParticle),G__get_linked_tagnum(&G__CParticle_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableCParticle_dict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__CParticle_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__CParticle_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CParticle_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__CParticle_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CParticle_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__CParticle_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__CParticle_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CParticle_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__CParticle_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CParticle_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__CParticle_dictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__CParticle_dictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CParticle_dictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__CParticle_dictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CParticle_dictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* CParticle */
static void G__setup_memvarCParticle(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CParticle_dictLN_CParticle));
   { CParticle *p; p=(CParticle*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"Px=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"Py=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"Pz=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"E=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"Mass=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"Charge=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"m_pid=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"m_status=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CParticle_dictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,2,"parameters=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CParticle_dictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarCParticle_dict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncCParticle(void) {
   /* CParticle */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CParticle_dictLN_CParticle));
   G__memfunc_setup("CParticle",887,G__CParticle_dict_170_0_1, 105, G__get_linked_tagnum(&G__CParticle_dictLN_CParticle), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CParticle",887,G__CParticle_dict_170_0_2, 105, G__get_linked_tagnum(&G__CParticle_dictLN_CParticle), -1, 0, 3, 1, 1, 0, 
"i - - 0 - pX i - - 0 - pY "
"i - - 0 - pZ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CParticle",887,G__CParticle_dict_170_0_3, 105, G__get_linked_tagnum(&G__CParticle_dictLN_CParticle), -1, 0, 4, 1, 1, 0, 
"i - - 0 - pX i - - 0 - pY "
"i - - 0 - pZ i - - 0 - charge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CParticle",887,G__CParticle_dict_170_0_4, 105, G__get_linked_tagnum(&G__CParticle_dictLN_CParticle), -1, 0, 5, 1, 1, 0, 
"i - - 0 - pX i - - 0 - pY "
"i - - 0 - pZ i - - 0 - mass "
"i - - 0 - charge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CParticle",887,G__CParticle_dict_170_0_5, 105, G__get_linked_tagnum(&G__CParticle_dictLN_CParticle), -1, 0, 6, 1, 1, 0, 
"i - - 0 - pX i - - 0 - pY "
"i - - 0 - pZ i - - 0 - mass "
"i - - 0 - charge i - - 0 - energy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CParticle",887,G__CParticle_dict_170_0_6, 105, G__get_linked_tagnum(&G__CParticle_dictLN_CParticle), -1, 0, 1, 1, 1, 0, "U 'CParticle' - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setParameter",1261,G__CParticle_dict_170_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParameters",1364,G__CParticle_dict_170_0_8, 117, G__get_linked_tagnum(&G__CParticle_dictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<int>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("px",232,G__CParticle_dict_170_0_9, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("py",233,G__CParticle_dict_170_0_10, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pz",234,G__CParticle_dict_170_0_11, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("e",101,G__CParticle_dict_170_0_12, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("id",205,G__CParticle_dict_170_0_13, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPxPyPz",923,G__CParticle_dict_170_0_14, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 1 - px i - - 1 - py "
"i - - 1 - pz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mass",436,G__CParticle_dict_170_0_15, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("charge",618,G__CParticle_dict_170_0_16, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("status",676,G__CParticle_dict_170_0_17, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setID",473,G__CParticle_dict_170_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCharge",918,G__CParticle_dict_170_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStatus",976,G__CParticle_dict_170_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMass",736,G__CParticle_dict_170_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setE",401,G__CParticle_dict_170_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("invMassE",806,G__CParticle_dict_170_0_23, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("invMassM",814,G__CParticle_dict_170_0_24, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcPt",599,G__CParticle_dict_170_0_25, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcPhi",692,G__CParticle_dict_170_0_26, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcPhiWrap",1102,G__CParticle_dict_170_0_27, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcPhiWrapGrad",1484,G__CParticle_dict_170_0_28, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcP",483,G__CParticle_dict_170_0_29, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcE",472,G__CParticle_dict_170_0_30, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcEta",685,G__CParticle_dict_170_0_31, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copy",443,G__CParticle_dict_170_0_32, 117, G__get_linked_tagnum(&G__CParticle_dictLN_CParticle), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__CParticle_dict_170_0_33, 117, G__get_linked_tagnum(&G__CParticle_dictLN_CParticle), -1, 0, 1, 1, 1, 0, "u 'CParticle' - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<",936,G__CParticle_dict_170_0_34, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CParticle' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__CParticle_dict_170_0_35, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("toString",858,G__CParticle_dict_170_0_36, 117, G__get_linked_tagnum(&G__CParticle_dictLN_string), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CParticle_dict_170_0_37, 85, G__get_linked_tagnum(&G__CParticle_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&CParticle::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CParticle_dict_170_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&CParticle::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CParticle_dict_170_0_39, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&CParticle::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CParticle_dict_170_0_40, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&CParticle::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CParticle_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CParticle_dict_170_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CParticle_dict_170_0_45, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&CParticle::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CParticle_dict_170_0_46, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&CParticle::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CParticle_dict_170_0_47, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&CParticle::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CParticle_dict_170_0_48, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&CParticle::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("CParticle", 887, G__CParticle_dict_170_0_49, (int) ('i'), G__get_linked_tagnum(&G__CParticle_dictLN_CParticle), -1, 0, 1, 1, 1, 0, "u 'CParticle' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~CParticle", 1013, G__CParticle_dict_170_0_50, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__CParticle_dict_170_0_51, (int) ('u'), G__get_linked_tagnum(&G__CParticle_dictLN_CParticle), -1, 1, 1, 1, 1, 0, "u 'CParticle' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncCParticle_dict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalCParticle_dict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcCParticle_dict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__CParticle_dictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__CParticle_dictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__CParticle_dictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__CParticle_dictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__CParticle_dictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__CParticle_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__CParticle_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__CParticle_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__CParticle_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__CParticle_dictLN_CParticle = { "CParticle" , 99 , -1 };
G__linked_taginfo G__CParticle_dictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__CParticle_dictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableCParticle_dict() {
  G__CParticle_dictLN_TClass.tagnum = -1 ;
  G__CParticle_dictLN_TBuffer.tagnum = -1 ;
  G__CParticle_dictLN_TMemberInspector.tagnum = -1 ;
  G__CParticle_dictLN_TObject.tagnum = -1 ;
  G__CParticle_dictLN_string.tagnum = -1 ;
  G__CParticle_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__CParticle_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__CParticle_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__CParticle_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__CParticle_dictLN_CParticle.tagnum = -1 ;
  G__CParticle_dictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__CParticle_dictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableCParticle_dict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__CParticle_dictLN_TClass);
   G__get_linked_tagnum_fwd(&G__CParticle_dictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__CParticle_dictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__CParticle_dictLN_TObject);
   G__get_linked_tagnum_fwd(&G__CParticle_dictLN_string);
   G__get_linked_tagnum_fwd(&G__CParticle_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__CParticle_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__CParticle_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__CParticle_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CParticle_dictLN_CParticle),sizeof(CParticle),-1,62720,"Integrate this class into ROOT",G__setup_memvarCParticle,G__setup_memfuncCParticle);
   G__get_linked_tagnum_fwd(&G__CParticle_dictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__CParticle_dictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupCParticle_dict(void) {
  G__check_setup_version(30051515,"G__cpp_setupCParticle_dict()");
  G__set_cpp_environmentCParticle_dict();
  G__cpp_setup_tagtableCParticle_dict();

  G__cpp_setup_inheritanceCParticle_dict();

  G__cpp_setup_typetableCParticle_dict();

  G__cpp_setup_memvarCParticle_dict();

  G__cpp_setup_memfuncCParticle_dict();
  G__cpp_setup_globalCParticle_dict();
  G__cpp_setup_funcCParticle_dict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncCParticle_dict();
  return;
}
class G__cpp_setup_initCParticle_dict {
  public:
    G__cpp_setup_initCParticle_dict() { G__add_setup_func("CParticle_dict",(G__incsetup)(&G__cpp_setupCParticle_dict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initCParticle_dict() { G__remove_setup_func("CParticle_dict"); }
};
G__cpp_setup_initCParticle_dict G__cpp_setup_initializerCParticle_dict;

